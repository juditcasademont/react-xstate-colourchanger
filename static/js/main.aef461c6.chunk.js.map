{"version":3,"sources":["dmAppointment.ts","newAppointment.ts","main.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","polar_grammar","yes_no","assign","context","recResult","cancel","actions","dmImproved","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","askAppointment","RECOGNISED","counter","who","cond","target","MAX","ask","delay","id","nomatch","max","whole_day","confirmation_whole_day","confirmation_with_time","appointment_created","dmMain","utterance","promptAndAsk","invocation","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","rasa_guess","intent","name","console","log","onError","choose","appointment","todo","timer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.aef461c6.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Peter\": { person: \"Peter Pan\" },\r\n    \"Emma\": { person: \"Emma Watson\" },\r\n    \"Greta\": { person: \"Greta Thunberg\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 4\": { time: \"4:00\" },\r\n    \"at 5\": { time: \"5:00\" },\r\n    \"at five\": { time: \"5:00\" }\r\n}\r\n\r\nconst polar_grammar: { [index: string]: { yes_no?: boolean } } = {\r\n    \"yes\": { yes_no: true },\r\n    \"yep\": { yes_no: true },\r\n    \"indeed\": { yes_no: true },\r\n    \"of course\": { yes_no: true },\r\n    \"yes please\": { yes_no: true },\r\n    \"no\": { yes_no: false },\r\n    \"nope\": { yes_no: false },\r\n    \"no way\": { yes_no: false },\r\n    \"absolutely not\": { yes_no: false },\r\n    \"not at all\": { yes_no: false },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"\r\n                },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Meeting ${context.person}. On which day is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know what day this is\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'confirmation_whole_day', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                    { target: 'time', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                \r\n                    { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Meeting ${context.person} on ${context.day}. Will it take the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirmation_with_time\"\r\n                },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. At what time is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry you will have to repeat that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirmation_whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                     target: 'appointment_created', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                     { target: 'who', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't catch that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirmation_with_time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                     target: 'appointment_created', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                     { target: 'who', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't catch that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        appointment_created: {\r\n            initial: \"prompt\",\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        },\r\n}})\r\n","import { Action, Machine, assign, send, actions, State, MachineConfig } from \"xstate\";\r\n// import { cancel } from \"xstate/lib/actionTypes\";\r\nconst {cancel} = actions\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: [send('LISTEN'), send('MAX', {delay: 5000, id: 'noMax'})]\r\n            },\r\n\t}})\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Peter\": { person: \"Peter Pan\" },\r\n    \"Emma\": { person: \"Emma Watson\" },\r\n    \"Greta\": { person: \"Greta Thunberg\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 8\": { time: \"8:00\" },\r\n    \"at 7\": { time: \"7:00\" },\r\n    \"at 4\": { time: \"4:00\" },\r\n    \"at 5\": { time: \"5:00\" },\r\n    \"at five\": { time: \"5:00\" }\r\n}\r\n\r\nconst polar_grammar: { [index: string]: { yes_no?: boolean } } = {\r\n    \"yes\": { yes_no: true },\r\n    \"yep\": { yes_no: true },\r\n    \"indeed\": { yes_no: true },\r\n    \"of course\": { yes_no: true },\r\n    \"yes please\": { yes_no: true },\r\n    \"no\": { yes_no: false },\r\n    \"nope\": { yes_no: false },\r\n    \"no way\": { yes_no: false },\r\n    \"absolutely not\": { yes_no: false },\r\n    \"not at all\": { yes_no: false },\r\n}\r\n\r\nexport const dmImproved: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"askAppointment\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        askAppointment: {\r\n            initial: 'who',\r\n            on: {\r\n                RECOGNISED: {\r\n                    actions: assign((context) => {return {counter: context.counter+1 }}) // WRONG\r\n                },\r\n            },\r\n            states: {\r\n        who: {\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: [assign((context) => { return { person: grammar[context.recResult].person } }), cancel('noMax')],\r\n                    target: \"day\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n                MAX: 'max'\r\n            },\r\n            ...promptAndAsk(\"Who are you meeting with?\"),\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        max: {\r\n            entry: say(\"Sorry, I didn't hear anything\"),\r\n            on: { \"ENDSPEECH\": \"#root.dm.init\"}\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"whole_day\"\r\n                },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Meeting ${context.person}. On which day is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know what day this is\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'confirmation_whole_day', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                    { target: 'time', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                \r\n                    { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. Meeting ${context.person} on ${context.day}. Will it take the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirmation_with_time\"\r\n                },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. At what time is your meeting?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry you will have to repeat that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirmation_whole_day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                     target: 'appointment_created', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                     { target: 'who', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't catch that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        confirmation_with_time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                     target: 'appointment_created', cond: (context) => polar_grammar[context.recResult].yes_no === true },\r\n                     { target: 'who', cond: (context) => polar_grammar[context.recResult].yes_no === false },\r\n                    { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I didn't catch that\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        appointment_created: {\r\n            initial: \"prompt\",\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        },\r\n}}}})\r\n","import { MachineConfig, send, assign, Action } from \"xstate\";\r\n\r\n//import { dmMachine, say, listen } from \"./dmAppointment\";\r\nimport { dmMachine } from \"./dmColourChanger\";\r\nimport { say, listen } from \"./dmAppointment\";\r\nimport { dmMachine4 } from \"./dmLab4\";\r\nimport { dmImproved } from \"./newAppointment\";\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: send('LISTEN')\r\n            },\r\n\t}})\r\n}\r\n\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointmentofpanic.herokuapp.com/model/parse'\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nexport const dmMain: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n\twelcome: {\r\n\t    on: {\r\n\t\tRECOGNISED: {\r\n\t\t    target: 'invocation',\r\n\t\t    actions: assign((context) => { return { utterance: context.recResult } }),\r\n                }\r\n            },\r\n\t    ...promptAndAsk(\"What would you like to do?\")\r\n\t},\r\n\tinvocation: {\r\n\t    invoke: {\r\n\t\tid: 'whatever',\r\n                src: (context, event) => nluRequest(context.utterance),\r\n                onDone: {\r\n                    target: 'choose',\r\n                    actions: [assign((context, event) => { return {rasa_guess: event.data.intent.name }}),\r\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n\t\tonError: {\r\n                    target: 'welcome',\r\n\t\t    actions: (context,event) => console.log(event.data)\r\n                }\r\n            }\r\n\t},\r\n    choose: {\r\n        entry: send('RECOGNISED'),\r\n        on: {\r\n            RECOGNISED: [\r\n                { target: 'appointment', cond: (context) => context.rasa_guess === \"appointment\" },\r\n                { target: 'todo', cond: (context) => context.rasa_guess === \"TODO_list\" },\r\n                { target: 'timer', cond: (context) => context.rasa_guess === \"timer\" },\r\n            ]\r\n        },\r\n    },\r\n    appointment: {\r\n        //...dmMachine //This one is for the Lab 2 version\r\n        //...dmMachine4 //This one is for the Lab 4 version\r\n        ...dmImproved\r\n    },\r\n    todo: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: { entry: say(\"Let's write a todo list\") }\r\n        }\r\n    },\r\n    timer: {\r\n        initial: \"prompt\",\r\n        states: {\r\n            prompt: { entry: say(\"Let's set a timer\") }\r\n        }}\r\n    }})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMain } from \"./main\";\r\nimport { dmHome } from \"./dmSmartHome\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMain\r\n            //...dmHome\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        MAX: 'idle',\r\n                    },\r\n                    states: {\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://appointmentofpanic.herokuapp.com/model/parse'\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}